"use strict";(()=>{var e={};e.id=527,e.ids=[527],e.modules={30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},13685:e=>{e.exports=require("http")},95687:e=>{e.exports=require("https")},85477:e=>{e.exports=require("punycode")},12781:e=>{e.exports=require("stream")},57310:e=>{e.exports=require("url")},59796:e=>{e.exports=require("zlib")},23154:(e,t,a)=>{a.r(t),a.d(t,{headerHooks:()=>d,originalPathname:()=>b,patchFetch:()=>g,requestAsyncStorage:()=>m,routeModule:()=>l,serverHooks:()=>p,staticGenerationAsyncStorage:()=>_,staticGenerationBailout:()=>h});var r={};a.r(r),a.d(r,{GET:()=>c});var s=a(10884),o=a(16132),n=a(21040),i=a(95798),u=a(58081);async function c(){try{let e=new u.Q(process.env.NEXT_PUBLIC_SUPABASE_URL,process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY),t=await e.getTableSchemas(),a=e.getCommonMetrics();return i.Z.json({schemas:t,metrics:a,schemaContext:e.generateSchemaContext()})}catch(e){return console.error("Schema API error:",e),i.Z.json({error:"Failed to fetch schema information"},{status:500})}}let l=new s.AppRouteRouteModule({definition:{kind:o.x.APP_ROUTE,page:"/api/schema/route",pathname:"/api/schema",filename:"route",bundlePath:"app/api/schema/route"},resolvedPagePath:"/Users/trinayhari/SailoGrowth/app/api/schema/route.ts",nextConfigOutput:"",userland:r}),{requestAsyncStorage:m,staticGenerationAsyncStorage:_,serverHooks:p,headerHooks:d,staticGenerationBailout:h}=l,b="/api/schema/route";function g(){return(0,n.patchFetch)({serverHooks:p,staticGenerationAsyncStorage:_})}},58081:(e,t,a)=>{a.d(t,{Q:()=>s});var r=a(54556);class s{constructor(e,t){this.supabase=(0,r.eI)(e,t)}async getTableSchemas(){try{let{data:e,error:t}=await this.supabase.from("information_schema.tables").select("table_name").eq("table_schema","public").eq("table_type","BASE TABLE");if(t)throw t;let a=[];for(let t of e){let{data:e,error:r}=await this.supabase.from("information_schema.columns").select("column_name, data_type, is_nullable, column_default").eq("table_schema","public").eq("table_name",t.table_name).order("ordinal_position");if(r)throw r;a.push({table_name:t.table_name,columns:e.map(e=>({column_name:e.column_name,data_type:e.data_type,is_nullable:"YES"===e.is_nullable,column_default:e.column_default}))})}return a}catch(e){return console.error("Error fetching schema:",e),[]}}async executeQuery(e){try{let{data:t,error:a}=await this.supabase.rpc("execute_sql",{query:e});if(a)throw a;return t||[]}catch(e){throw console.error("Error executing query:",e),e}}getCommonMetrics(){return[{name:"activation_rate",description:"Percentage of users who completed key activation events",sql_template:"SELECT COUNT(DISTINCT activated_users) * 100.0 / COUNT(DISTINCT total_users) as activation_rate FROM users",category:"engagement"},{name:"daily_active_users",description:"Number of unique users active in the last 24 hours",sql_template:"SELECT COUNT(DISTINCT user_id) as dau FROM events WHERE created_at >= NOW() - INTERVAL '1 day'",category:"engagement"},{name:"retention_rate",description:"Percentage of users who return after initial signup",sql_template:"SELECT cohort_week, COUNT(*) as retained_users FROM user_cohorts WHERE weeks_since_signup = 1 GROUP BY cohort_week",category:"retention"}]}generateSchemaContext(){return`
Available tables and their schemas:
- users: id, email, created_at, last_active_at, plan_type
- events: id, user_id, event_name, properties, created_at
- subscriptions: id, user_id, plan_id, status, created_at, updated_at
- products: id, name, category, price, created_at

Common metrics:
- activation_rate: activated_users / total_users
- daily_active_users: unique users in last 24h
- retention_rate: users who return after signup
    `}}}};var t=require("../../../webpack-runtime.js");t.C(e);var a=e=>t(t.s=e),r=t.X(0,[271,107,556],()=>a(23154));module.exports=r})();