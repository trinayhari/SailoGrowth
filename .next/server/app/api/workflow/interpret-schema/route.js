"use strict";(()=>{var e={};e.id=517,e.ids=[517],e.modules={30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},89453:(e,t,a)=>{a.r(t),a.d(t,{headerHooks:()=>y,originalPathname:()=>f,patchFetch:()=>g,requestAsyncStorage:()=>h,routeModule:()=>p,serverHooks:()=>m,staticGenerationAsyncStorage:()=>d,staticGenerationBailout:()=>w});var s={};a.r(s),a.d(s,{POST:()=>l});var r=a(10884),n=a(16132),o=a(21040),i=a(95798),c=a(53569),u=a(2701);async function l(e){try{let t=await e.json(),{connectionConfig:a,model:s,temperature:r}=t;if(!a)return i.Z.json({error:"Connection configuration is required"},{status:400});let n=await u.h.fetchSchema(a),o=JSON.stringify(n,null,2),l=await c.t.interpretSchema(o,s||"anthropic/claude-3-sonnet",r||.7);return i.Z.json({success:!0,schema:n,interpretation:l,model:s||"anthropic/claude-3-sonnet"})}catch(e){return console.error("Schema interpretation failed:",e),i.Z.json({error:e.message||"Failed to interpret schema"},{status:500})}}let p=new r.AppRouteRouteModule({definition:{kind:n.x.APP_ROUTE,page:"/api/workflow/interpret-schema/route",pathname:"/api/workflow/interpret-schema",filename:"route",bundlePath:"app/api/workflow/interpret-schema/route"},resolvedPagePath:"/Users/trinayhari/SailoGrowth/app/api/workflow/interpret-schema/route.ts",nextConfigOutput:"",userland:s}),{requestAsyncStorage:h,staticGenerationAsyncStorage:d,serverHooks:m,headerHooks:y,staticGenerationBailout:w}=p,f="/api/workflow/interpret-schema/route";function g(){return(0,o.patchFetch)({serverHooks:m,staticGenerationAsyncStorage:d})}},2701:(e,t,a)=>{a.d(t,{h:()=>r});class s{async testConnection(e){let t=Date.now();try{switch(e.type){case"supabase":return await this.testSupabase(e);case"posthog":return await this.testPostHog(e);case"postgresql":case"mysql":return await this.testSQLDatabase(e);default:return{success:!1,message:`Unsupported connection type: ${e.type}`}}}catch(e){return{success:!1,message:`Connection failed: ${e.message}`,connectionTime:Date.now()-t}}}async testSupabase(e){let t=Date.now();try{let a=await fetch(`${e.endpoint}/rest/v1/`,{method:"GET",headers:{apikey:e.apiKey,Authorization:`Bearer ${e.apiKey}`}});if(a.ok)return{success:!0,message:"Successfully connected to Supabase",connectionTime:Date.now()-t};return{success:!1,message:`Supabase connection failed: ${a.statusText}`,connectionTime:Date.now()-t}}catch(e){throw Error(`Supabase connection error: ${e.message}`)}}async testPostHog(e){let t=Date.now();try{let a=await fetch(`${e.endpoint}/api/projects`,{method:"GET",headers:{Authorization:`Bearer ${e.apiKey}`}});if(a.ok)return{success:!0,message:"Successfully connected to PostHog",connectionTime:Date.now()-t};return{success:!1,message:`PostHog connection failed: ${a.statusText}`,connectionTime:Date.now()-t}}catch(e){throw Error(`PostHog connection error: ${e.message}`)}}async testSQLDatabase(e){return{success:!0,message:`SQL connection test not fully implemented yet for ${e.type}`,connectionTime:0}}async fetchSchema(e){switch(e.type){case"supabase":return await this.fetchSupabaseSchema(e);case"posthog":return await this.fetchPostHogSchema(e);case"postgresql":case"mysql":return await this.fetchSQLSchema(e);default:throw Error(`Unsupported connection type: ${e.type}`)}}async fetchSupabaseSchema(e){try{let t=await fetch(`${e.endpoint}/rest/v1/`,{method:"GET",headers:{apikey:e.apiKey,Authorization:`Bearer ${e.apiKey}`,Accept:"application/json"}});if(!t.ok)throw Error(`Failed to fetch schema: ${t.statusText}`);return{tables:[],relationships:[],entities:[]}}catch(e){throw Error(`Failed to fetch Supabase schema: ${e.message}`)}}async fetchPostHogSchema(e){try{let t=await fetch(`${e.endpoint}/api/projects/@current/event_definitions`,{method:"GET",headers:{Authorization:`Bearer ${e.apiKey}`}});if(!t.ok)throw Error(`Failed to fetch PostHog schema: ${t.statusText}`);return await t.json(),{tables:[{name:"events",columns:[{name:"event",type:"string",nullable:!1},{name:"timestamp",type:"timestamp",nullable:!1},{name:"distinct_id",type:"string",nullable:!1},{name:"properties",type:"jsonb",nullable:!0}]},{name:"persons",columns:[{name:"distinct_id",type:"string",nullable:!1,primaryKey:!0},{name:"properties",type:"jsonb",nullable:!0},{name:"created_at",type:"timestamp",nullable:!1}]}],relationships:[],entities:[{name:"User",table:"persons",description:"User entity tracked in PostHog",keyFields:["distinct_id"]},{name:"Event",table:"events",description:"User events and interactions",keyFields:["event","distinct_id"],eventFields:["event","timestamp"]}]}}catch(e){throw Error(`Failed to fetch PostHog schema: ${e.message}`)}}async fetchSQLSchema(e){return{tables:[],relationships:[],entities:[]}}async executeQuery(e,t){switch(e.type){case"supabase":return await this.executeSupabaseQuery(e,t);case"posthog":return await this.executePostHogQuery(e,t);default:throw Error(`Query execution not supported for ${e.type}`)}}async executeSupabaseQuery(e,t){try{let a=await fetch(`${e.endpoint}/rest/v1/rpc/execute_sql`,{method:"POST",headers:{apikey:e.apiKey,Authorization:`Bearer ${e.apiKey}`,"Content-Type":"application/json"},body:JSON.stringify({query:t})});if(!a.ok)throw Error(`Query failed: ${a.statusText}`);return await a.json()}catch(e){throw Error(`Supabase query execution failed: ${e.message}`)}}async executePostHogQuery(e,t){try{let a=await fetch(`${e.endpoint}/api/projects/@current/query`,{method:"POST",headers:{Authorization:`Bearer ${e.apiKey}`,"Content-Type":"application/json"},body:JSON.stringify({query:{kind:"HogQLQuery",query:t}})});if(!a.ok)throw Error(`Query failed: ${a.statusText}`);let s=await a.json();return s.results||[]}catch(e){throw Error(`PostHog query execution failed: ${e.message}`)}}}let r=new s},53569:(e,t,a)=>{a.d(t,{t:()=>r});class s{constructor(e){if(this.baseUrl="https://openrouter.ai/api/v1",this.apiKey=e||process.env.OPENROUTER_API_KEY||"",!this.apiKey)throw Error("OpenRouter API key is required")}async chat(e){try{let t=await fetch(`${this.baseUrl}/chat/completions`,{method:"POST",headers:{Authorization:`Bearer ${this.apiKey}`,"Content-Type":"application/json","HTTP-Referer":process.env.OPENROUTER_APP_URL||"http://localhost:3001","X-Title":process.env.OPENROUTER_APP_NAME||"SailoGrowth"},body:JSON.stringify(e)});if(!t.ok){let e=await t.json();throw Error(`OpenRouter API error: ${e.error?.message||t.statusText}`)}let a=await t.json();return a}catch(e){throw console.error("OpenRouter API call failed:",e),e}}async interpretSchema(e,t="anthropic/claude-3-sonnet",a=.7){let s=`You are a database schema analyst. Analyze the provided database schema and identify:
1. Key entities (e.g., users, events, sessions, products)
2. Important relationships between tables
3. Event tracking patterns
4. User behavior indicators
5. Business metrics that can be derived

Provide a clear, structured analysis that will help set up automated monitoring and alerts.`,r=`Analyze this database schema and identify key entities, relationships, and monitoring opportunities:

${e}`,n=await this.chat({model:t,messages:[{role:"system",content:s},{role:"user",content:r}],temperature:a,max_tokens:2e3});return n.choices[0].message.content}async generateMonitorQuery(e,t,a="anthropic/claude-3-sonnet"){let s=`You are an SQL expert. Generate SQL queries for monitoring specific conditions in a database.
Return your response as JSON with two fields: "query" (the SQL query) and "explanation" (brief description).`,r=`Generate a SQL query to monitor: ${t}

Context: ${e}

Return JSON with "query" and "explanation" fields.`,n=await this.chat({model:a,messages:[{role:"system",content:s},{role:"user",content:r}],temperature:.3,max_tokens:1e3});try{let e=JSON.parse(n.choices[0].message.content);return e}catch{return{query:n.choices[0].message.content,explanation:"Generated monitoring query"}}}async generateAlertMessage(e,t,a="anthropic/claude-3-sonnet"){let s=`You are a helpful assistant that generates alert messages based on templates and data.
Replace template variables like {{variable}} with actual values from the provided data.
Keep the message clear, concise, and actionable.`,r=`Template: ${e}

Data: ${JSON.stringify(t,null,2)}

Generate the final alert message with all variables replaced.`,n=await this.chat({model:a,messages:[{role:"system",content:s},{role:"user",content:r}],temperature:.5,max_tokens:500});return n.choices[0].message.content}}let r=new s}};var t=require("../../../../webpack-runtime.js");t.C(e);var a=e=>t(t.s=e),s=t.X(0,[271,107],()=>a(89453));module.exports=s})();